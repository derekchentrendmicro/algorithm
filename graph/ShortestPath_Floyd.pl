@D = ([ 0, 1, 5,99,99,99,99,99,99],
      [-1, 0, 3, 1, 5,99,99,99,99],
      [-1,-1, 0,99, 1, 7,99,99,99],
      [-1,-1,-1, 0,12,99, 3,99,99],
      [-1,-1,-1,-1, 0, 3, 6, 9,99],
      [-1,-1,-1,-1,-1, 0,99, 5,99],
      [-1,-1,-1,-1,-1,-1, 0, 2, 7],
      [-1,-1,-1,-1,-1,-1,-1, 0, 4],
      [-1,-1,-1,-1,-1,-1,-1,-1, 0]
	);

@P = ([0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	  [0,1,2,3,4,5,6,7,8],
	);

sub initMatrix
{
	for $v (0..$#D){
	  for $w (0..$v-1){
	    $D[$v][$w] = $D[$w][$v];
	    #$P[$v][$w] = $w;
	  }
	}
}

sub ShortestPath_Floyd
{
	for $k (0..$#D){
	  for $v (0..$#D){
	    for $w (0..$#D){
	      if ($D[$v][$w] > ($D[$v][$k] + $D[$k][$w])){
	      	  printf "D[$v][$w](%2d) = D[$v][$k](%2d) + D[$k][$w](%2d)\n",$D[$v][$w],$D[$v][$k],$D[$k][$w];
              $D[$v][$w] = $D[$v][$k] + $D[$k][$w];
	          $P[$v][$w] = $P[$v][$k];
	      }
	    }
	  }
	}
}

initMatrix();
ShortestPath_Floyd();
